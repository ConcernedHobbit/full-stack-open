{"version":3,"sources":["services/contacts.js","components/Contact.js","components/Notification.js","App.js","index.js"],"names":["baseURL","axios","get","then","response","data","newContact","post","id","console","error","Promise","reject","delete","Contact","contact","name","number","ContactList","contacts","filter","setContacts","deleteContact","toLowerCase","includes","map","onClick","ContactForm","callback","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","e","event","success","value","onChange","target","type","Notification","urgency","message","length","divClass","class","Filter","handleFilterChange","App","errorMessage","setErrorMessage","clearErrorMessage","setFilter","useEffect","contactService","preventDefault","window","confirm","resolve","contactId","find","catch","setTimeout","concat","otherContact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a56861db.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseURL = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseURL)\n    return request.then(response => response.data)\n}\n\nconst create = newContact => {\n    const request = axios.post(baseURL, newContact)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newContact) => {\n    console.error(`contacts.update not implemented`)\n    return Promise.reject()\n    const request = axios.put(`${baseURL}/${id}`, newContact)\n    return request.then(response => response.data)\n}\n\nconst remove = id => {\n    const request = axios.delete(`${baseURL}/${id}`)\n    return request\n}\n\nexport default { getAll, create, update, remove }","import { useState } from 'react'\n\nconst Contact = ({contact}) => <span>{contact.name} {contact.number}</span>\n\nconst ContactList = ({contacts, filter, setContacts, deleteContact}) => {\n  return (\n    <div>\n      { \n        contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n                .map(contact => {\n                  return (\n                    <div key={contact.name}>\n                      <Contact contact={contact} setContacts={setContacts} /> <button onClick={() => deleteContact(contact)}>delete</button>\n                    </div>\n                  )\n                })\n      }\n    </div>\n  )\n}\n\nconst ContactForm = ({callback}) => {\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n\n  const handleCallback = (event) => {\n    callback({event, newName, newNumber})\n        .then(success => {\n            if (!success) return;\n            setNewName('')\n            setNewNumber('')\n        })\n  }\n\n  return (\n    <form onSubmit={(e) => handleCallback(e)}>\n      <div>name: <input value={newName} onChange={handleNameChange} /></div>\n      <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n      <div><button type=\"submit\">add</button></div>\n    </form>\n  )\n}\n\nexport default Contact\nexport { Contact, ContactList, ContactForm }","const Notification = ({ urgency, message }) => {\n    if (message === null || message.length === 0) return null\n\n    const divClass = `notification ${urgency}`\n    return (\n        <div class={divClass}>\n            <p>{message}</p>\n        </div>\n    )\n}\n\nexport default Notification","import React, { useEffect, useState } from 'react'\nimport contactService from './services/contacts'\nimport { ContactList, ContactForm } from './components/Contact'\nimport Notification from './components/Notification'\nimport './index.css'\n\nconst Filter = ({filter, handleFilterChange}) => {\n  return (\n    <div>\n      filter contacts by name: <input value={filter} onChange={handleFilterChange} />\n    </div>\n  )\n}\n\nconst App = () => {\n  const [contacts, setContacts] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const clearErrorMessage = () => { setErrorMessage(null) }\n  \n  const [filter, setFilter] = useState('')\n  const handleFilterChange = (event) => setFilter(event.target.value)\n\n  useEffect(() => {\n    contactService.getAll().then(data => setContacts(data))\n  }, [])\n\n  const addContact = ({event, newName, newNumber}) => {\n    event.preventDefault()\n\n    const newContact = {\n      name: newName,\n      number: newNumber\n    }\n\n    const names = contacts.map((contact) => contact.name)\n    if (names.includes(newName)) {\n      const confirmation = window.confirm(`${newName} is already in your contacts, replace the old number with a new one?`)\n      if (!confirmation) return Promise.resolve(false);\n\n      const contactId = contacts.find(contact => contact.name === newName).id\n\n      return contactService\n        .update(contactId, newContact)\n        .then(response => {\n          setContacts(contacts.map(contact => contact.id === contactId ? response : contact))\n          return true\n        })\n        .catch(error => {\n          console.error(error)\n          setErrorMessage('Failed to update contact number')\n          setTimeout(clearErrorMessage, 5000)\n          return false\n        })\n    } else {\n      return contactService\n      .create(newContact)\n      .then(response => {\n        setContacts(contacts.concat(response))\n        return true\n      })\n      .catch(error => {\n        console.error(error)\n        setErrorMessage('Failed to add contact to database')\n        setTimeout(clearErrorMessage, 5000)\n        return false\n      })\n    }\n  }\n\n  const deleteContact = contact => {\n    const confirmation = window.confirm(`Delete ${contact.name}?`)\n    if (!confirmation) return;\n\n    contactService\n      .remove(contact.id)\n      .then(response => {\n        setContacts(\n          contacts.filter(otherContact => otherContact.id !== contact.id)\n        )\n      })\n      .catch(error => {\n        console.error(error)\n        setErrorMessage(`Failed to delete contact from server`)\n        setTimeout(clearErrorMessage, 5000)\n      })\n  }\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <Notification urgency=\"error\" message={errorMessage} />\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\n\n      <h2>Add new contact</h2>\n      <ContactForm callback={addContact} />\n\n      <h2>Contacts</h2>\n      <ContactList contacts={contacts} filter={filter} setContacts={setContacts} deleteContact={deleteContact} />\n    </>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}